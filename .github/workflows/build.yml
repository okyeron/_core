name: build

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout project
        uses: actions/checkout@v4.1.3
      - name: Install sox
        run: |
          sudo apt update
          sudo apt install sox libsox-fmt-mp3
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3.0.0
        with:
          hugo-version: "0.133.1"
      - name: Set up Python
        uses: actions/setup-python@v5.1.0
        with:
          python-version: "3.11"
      - name: Set up Zig
        uses: goto-bus-stop/setup-zig@v2.2.0
        with:
          version: "0.11.0"
      - name: Setup Go
        uses: actions/setup-go@v5.0.2
      - name: Install Pico SDK dependencies
        run: |
          sudo apt update
          sudo apt install cmake build-essential gcc wget tar
      - name: Create and activate a Python virtual environment
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          uv venv .venv
          echo "VIRTUAL_ENV=.venv" >> $GITHUB_ENV
          echo "$PWD/.venv/bin" >> $GITHUB_PATH
      - name: Install Python dependencies
        run: uv pip install -r requirements.txt
      - run: uv pip freeze
      - name: Download and install ARM GNU Toolchain 13.3.rel1
        run: |
          wget https://developer.arm.com/-/media/Files/downloads/gnu/13.2.rel1/binrel/arm-gnu-toolchain-13.2.rel1-x86_64-arm-none-eabi.tar.xz
          tar -xf arm-gnu-toolchain-13.2.rel1-x86_64-arm-none-eabi.tar.xz
          sudo mv arm-gnu-toolchain-13.2.rel1-x86_64-arm-none-eabi /opt/arm-gnu-toolchain
          echo "/opt/arm-gnu-toolchain/bin" >> $GITHUB_PATH
      - name: ARM GCC version
        run: |
          arm-none-eabi-gcc --version
          arm-none-eabi-g++ --version
      - name: Checkout pico-sdk
        uses: actions/checkout@v4.1.7
        with:
          repository: raspberrypi/pico-sdk
          path: pico-sdk
          submodules: true
          ref: 1.5.1
      - name: Patch tinyusb
        run: |
          sed -i 's/OSAL_TIMEOUT_WAIT_FOREVER/OSAL_TIMEOUT_NORMAL/g' $GITHUB_WORKSPACE/pico-sdk/lib/tinyusb/src/tusb.c
          cat $GITHUB_WORKSPACE/pico-sdk/lib/tinyusb/src/tusb.c | grep osal_mutex
      - name: Set PICO_SDK_PATH
        run: echo "PICO_SDK_PATH=$GITHUB_WORKSPACE/pico-sdk" >> $GITHUB_ENV
      - name: Build zeptocore.uf2
        run: |
          make zeptocore
          cp zeptocore.uf2 zeptocore_${{ github.event.release.name }}.uf2
